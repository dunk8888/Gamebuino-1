#include <SPI.h>
#include <Gamebuino.h>
Gamebuino gb = Gamebuino();
int ball_x = LCDWIDTH/2; //set the horizontal position to the middle of the screen
int ball_y = LCDHEIGHT/2;
int ghost_x = LCDWIDTH/2; //set the horizontal position to the middle of the screen
int ghost_y = LCDHEIGHT/4;
int ball_size = 8;
int an = 0;
int command1 = 0;


static unsigned char PROGMEM logo[] =
{
  64, 16,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00001111, B11100000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00001100, B00100000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00001100, B00100011, B11100011, B11100011, B11000111, B10001111, B10000111, B00010000,
  B00001111, B11100011, B00100011, B00000011, B01101101, B10001100, B10000111, B10010000,
  B00001100, B00000011, B00100011, B00000011, B00111001, B10001100, B10000110, B11010000,
  B00001100, B00000011, B00100011, B00000011, B00000001, B10001100, B10000110, B01110000,
  B00001100, B00000011, B11110011, B11100011, B00000001, B10001111, B11000110, B00110000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
};


static unsigned char PROGMEM pacmano[]=
{
  8,8,
  B00011111,
  B00110110,
  B01111100,
  B01111000,
  B01111100,
  B00111110,
  B00011111,
  B00000000,
};

static unsigned char PROGMEM pacmanc[]=
{
  8,8,
  B00011100,
  B00110110,
  B01111111,
  B01111111,
  B01111111,
  B00111110,
  B00011100,
  B00000000,
};

//static unsigned char PROGMEM pacmanoc[]=
//{
//  8,8,
//  B00011110,
//  B00110111,
//  B01111110,
//  B01111100,
//  B01111110,
//  B00111111,
//  B00011110,
//  B00000000,
//};
//
//static unsigned char PROGMEM pacmancc[]=
//{
//  8,8,
//  B00011110,
//  B00110111,
//  B01111111,
//  B01111110,
//  B01111111,
//  B00111111,
//  B00011100,
//  B00000000,
//};

static unsigned char PROGMEM ghost[]=
{
  8,8,
  B00000000,
  B00111100,
  B01111110,
  B11011011,
  B11111111,
  B11111111,
  B11111111,
  B10100101,
};

static unsigned char PROGMEM maze[]=
{
  88,48,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B11111111,B11111111,B00000000,B00000000,B00000000,B00000000,B11111111,B11111111,B00000000,B00010000, // 8
  B10000000,B00000000,B00000011,B00000000,B00000000,B00000000,B00000000,B11000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000011,B00000000,B00000000,B00000000,B00000000,B11000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000011,B00000000,B11111111,B11111111,B00000000,B11000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000001,B10000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000001,B10000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000001,B10000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B11111111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001111,B11110000, // 16
  B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001000,B00000000,
  B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001000,B00000000,
  B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001000,B00000000,
  B11111111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001111,B11111111,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B11110000,B00001111,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B10000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000, 
  B00000000,B00000000,B00000000,B00000000,B10000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000, //24
  B00000000,B00000000,B00000000,B00000000,B10000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B10000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B10000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B11111111,B00000000,B00000000,B00000000,B10000000,B00000001,B00000000,B00000000,B00000000,B00001111,B11111111,
  B00000001,B00000000,B00000000,B00000000,B11111111,B11111111,B00000000,B00000000,B00000000,B00001000,B00000000,
  B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001000,B00000000,
  B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001000,B00000000,
  B11111111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001111,B11110000, // 32
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000011,B00000000,B11111111,B11111111,B00000000,B11000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000011,B00000000,B00000001,B10000000,B00000000,B11000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000011,B00000000,B00000001,B10000000,B00000000,B11000000,B00000000,B00000000,B00010000,
  B10000000,B11111111,B11111111,B00000000,B00000001,B10000000,B00000000,B11111111,B11111111,B00000000,B00010000, //40
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00010000,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111, //48


};

void setup() {
  gb.begin();

  gb.titleScreen(F("Pacman by Sot0 (0.1)"), logo);
  gb.battery.show = false; //hide the battery indicator

  gb.setFrameRate(8);


}

void loop() {
  if(gb.update()){

    if(gb.buttons.pressed(BTN_C)){
      int ball_x = LCDWIDTH/2; //set the horizontal position to the middle of the screen
      int ball_y = LCDHEIGHT/2;
      int ghost_x = LCDWIDTH/2; //set the horizontal position to the middle of the screen
      int ghost_y = LCDHEIGHT/4;
      int an = 0;
      int command1 = 0;
      setup();
    }

    
    if(gb.buttons.pressed(BTN_UP)){ 
      command1 = 7;
    }  
    
    
    if(gb.buttons.pressed(BTN_DOWN)){
      command1 = 8;

    }

    if(gb.buttons.pressed(BTN_LEFT)){

      command1 = 6;


    }
    if(gb.buttons.pressed(BTN_RIGHT)){

      command1 = 5;

    }

    if(ball_x < 0){
      //bring it back in the screen
      ball_x = 0;
    }
    //if the pac is touching the right side
    if((ball_x + ball_size) > LCDWIDTH){
      ball_x = LCDWIDTH - ball_size;
    }
    //if the pac is touching the top side
    if(ball_y < 0){
      ball_y = 0;
    }
    //if the pac is touching the down side
    if((ball_y + ball_size) > LCDHEIGHT){
      ball_y = LCDHEIGHT - ball_size;
    }


    if(ball_y - ghost_y > ball_x - ghost_x && (ball_y > ghost_y)){
      ghost_y = ghost_y + 2;
    }
    else if(ghost_y == ball_y + 4 && ball_x == ghost_x + 4){
      gb.popup(F("Game Over!"), 30);
      setup();
    }
    else if(ball_y - ghost_y < ball_x - ghost_x && (ball_y < ghost_y)){
      ghost_y = ghost_y - 2;
    }

    if(ball_x - ghost_x > ball_y - ghost_y && (ball_x > ghost_x)){
      ghost_x = ghost_x + 2;
    }
    else if(ghost_x == ball_x){
      ghost_x = ghost_x;
    }
    else if(ball_x - ghost_x < ball_y - ghost_y && (ball_x < ghost_x)){
      ghost_x = ghost_x - 2;
    }


    gb.display.drawBitmap(0, 0, maze, NOROT, NOFLIP);
    switch(command1){
    case 1:
      ball_x = ball_x + 3;
      gb.display.drawBitmap(ball_x, ball_y, pacmano, NOROT, NOFLIP);
      gb.display.drawBitmap(ghost_x, ghost_y, ghost, NOROT, NOFLIP);
      command1 = 5;
      break;
    case 2:
      ball_x = ball_x - 3;
      gb.display.drawBitmap(ball_x, ball_y, pacmano, NOROT, FLIPH);
      gb.display.drawBitmap(ghost_x, ghost_y, ghost, NOROT, NOFLIP);
      command1 = 6;
      break;
    case 3:
      ball_y = ball_y - 3;
      gb.display.drawBitmap(ball_x, ball_y, pacmano, ROTCCW, NOFLIP);
      gb.display.drawBitmap(ghost_x, ghost_y, ghost, NOROT, NOFLIP);
      command1 = 7;
      break;
    case 4:
      ball_y = ball_y + 3;
      gb.display.drawBitmap(ball_x, ball_y, pacmano, ROTCW, NOFLIP);
      gb.display.drawBitmap(ghost_x, ghost_y, ghost, NOROT, NOFLIP);
      command1 = 8;
      break;
    case 5:
      ball_x = ball_x + 3;
      gb.display.drawBitmap(ball_x, ball_y, pacmanc, NOROT, NOFLIP);
      gb.display.drawBitmap(ghost_x, ghost_y, ghost, NOROT, NOFLIP);
      command1 = 1;
      break;
    case 6:
      ball_x = ball_x - 3;
      gb.display.drawBitmap(ball_x, ball_y, pacmanc, NOROT, FLIPH);
      gb.display.drawBitmap(ghost_x, ghost_y, ghost, NOROT, NOFLIP);
      command1 = 2;
      break;
    case 7:
      ball_y = ball_y - 3;
      gb.display.drawBitmap(ball_x, ball_y, pacmanc, ROTCCW, NOFLIP);
      gb.display.drawBitmap(ghost_x, ghost_y, ghost, NOROT, NOFLIP);
      command1 = 3;
      break;
    case 8:
      ball_y = ball_y + 3;
      gb.display.drawBitmap(ball_x, ball_y, pacmanc, ROTCW, NOFLIP);
      gb.display.drawBitmap(ghost_x, ghost_y, ghost, NOROT, NOFLIP);
      command1 = 4;
      break;
    }

  }

}










